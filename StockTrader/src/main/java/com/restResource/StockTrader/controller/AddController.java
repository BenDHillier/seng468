package com.restResource.StockTrader.controller;
import com.restResource.StockTrader.entity.Account;
import com.restResource.StockTrader.repository.AccountRepository;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.*;

/*
* controllers handle the requests so you'll need a controller to handle adding. I'd make an
* AccountRepository interface which extends CrudRepository. The implementation is autogenerated.
* If you make an entity like my PendingBuy class it should automatically create the db table for you.
* So, an Account class (with @Entity annotation)
* */

@RestController
public class AddController {

    private AccountRepository accountRepository;

    public AddController(AccountRepository accountRepository) {
        this.accountRepository = accountRepository;
    }

    //@PostMapping(value = "/add")
    @PutMapping(value = "/add")
    public @ResponseBody
    HttpStatus addToAccountBalance(@RequestParam String userId,
                                   @RequestParam int amount) {
        if( amount <= 0 ) {
            throw new IllegalArgumentException(
                    "The amount parameter must be greater than zero.");
        }
        else {
            Account account = Account.builder()
            .amount(amount)
            .userId(userId)
            .build();

            //TODO: This will just keep saving new accounts, so only want to do this if accnt not !exists
            accountRepository.save(account);

            //TODO: This is what we want, but it seems to expect a result set, so throws an error
            //side note: it still updates the table but that error is annoying
//            accountRepository.updateAccountBalance(account.getUserId(), account.getAmount())
//                    .orElseThrow(() -> new IllegalStateException(
//                    "User account not updated."));
        }
        return HttpStatus.OK;
    }
}